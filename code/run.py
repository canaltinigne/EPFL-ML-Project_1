# Simply the copy of Test Set Prediction Notebook

import numpy as np
from cross_validation import cross_validation
from polynomial import build_poly
from implementations import least_squares
from proj1_helpers import load_csv_data
from proj1_helpers import predict_labels
from proj1_helpers import create_csv_submission

test_set = load_csv_data('../data/test.csv')
y_test, X_test, ids, columns = test_set

selected_features = np.array([1,3,9,10,11,13,21,22,23])
selected_features = np.sort(np.append(selected_features, [0,4,5,6,12]))

log_transformed_columns = [3,9,10,13,21]

for i in log_transformed_columns:
    X_test[np.where(X_test[:,i] != -999), i] = np.log(X_test[np.where(X_test[:,i] != -999),i] + 1)
    X_test[np.where(X_test[:,i] == -999)] = -999

X_test = X_test[:, selected_features]

X_train = np.load('X_train_not_normalized.npy')

for i in [x for x in range(X_train.shape[1]) if x != 12]:
    col_val = X_train[np.where(X_train[:,i] != -999), i]
    X_test[np.where(X_test[:,i] != -999), i] = (X_test[np.where(X_test[:,i] != -999), i] - np.mean(col_val)) / (np.std(col_val)) 
    
X_test[np.where(X_test[:,0] == -999), 0] = np.median(X_test[np.where(X_test[:,0] != -999), 0])

ids_pri_0 = np.where(X_test[:, -2] == 0)[0]
ids_pri_1 = np.where(X_test[:, -2] == 1)[0]
ids_pri_23 = np.where((X_test[:, -2] == 2) | (X_test[:, -2] == 3))[0]

X_pri_0 = X_test[(X_test[:, -2] == 0),:]
X_pri_1 = X_test[(X_test[:, -2] == 1),:]
X_pri_23 = X_test[(X_test[:, -2] == 2) | (X_test[:, -2] == 3),:]

X_pri_0 = np.delete(X_pri_0, np.s_[12], axis=1)
X_pri_1 = np.delete(X_pri_1, np.s_[12], axis=1)
X_pri_23 = np.delete(X_pri_23, np.s_[12], axis=1)

selected_features = np.array([1,3,9,10,11,13,21,23])
selected_features = np.sort(np.append(selected_features, [0,4,5,6,12]))

delete_columns_0 = []

for i in range(X_pri_0.shape[1]):
    if np.isin(True, (X_pri_0[:,i] == -999)):
        delete_columns_0.append(i)
        
delete_columns_1 = []

for i in range(X_pri_1.shape[1]):
    if np.isin(True, (X_pri_1[:,i] == -999)):
        delete_columns_1.append(i)
        
X_pri_0 = np.delete(X_pri_0, np.s_[delete_columns_0], axis=1)  

X_pri_1 = np.delete(X_pri_1, np.s_[delete_columns_1], axis=1)  

predictions = np.zeros(len(y_test))

w0 = np.array([ 1.69602959e-01, -7.27441593e-01, -7.35410245e-02, -1.18069958e+01,
        5.45232112e+00,  2.22722203e-01,  7.99113282e+00,  4.77135107e-02,
       -9.02718990e+00, -5.81896358e-01, -7.51677536e-02,  2.71047475e-01,
       -6.06881677e-02, -2.81769535e-02,  1.71744463e-02, -3.91274861e-03,
        4.84288668e-04, -3.43335445e-05,  1.31275409e-06, -2.10317676e-08,
        2.59309911e-02,  2.36218006e-01, -1.50614242e-02, -3.57512623e-02,
        1.00258240e-02, -1.80683376e-04, -3.23470970e-04,  6.14119300e-05,
       -5.13895687e-06,  2.10020538e-07, -3.40055768e-09,  5.16003807e-01,
       -2.98354568e-01, -1.48833475e+00,  9.59800412e-03,  1.57829740e+00,
        7.25303894e-01, -3.03539840e-01, -2.58720495e-01, -2.08163055e-02,
        1.72568681e-02,  3.26499744e-03,  6.66848188e-01,  1.70419169e+00,
       -1.40483137e+00, -2.19614779e+00,  1.07312635e+00,  1.33303176e+00,
       -4.20112788e-01, -3.63145856e-01,  9.72799557e-02,  3.72204786e-02,
       -1.04660675e-02, -1.53030658e-02, -6.63388011e-02,  4.27274094e-02,
        3.60854181e-02, -3.91025846e-02, -3.98402974e-03,  1.08512429e-02,
       -1.63219178e-03, -7.97198641e-04,  2.58841415e-04, -2.09616939e-05,
       -7.75163624e-01, -4.04161617e+00,  5.63006205e+00,  1.82525535e+01,
       -1.76510720e+01, -3.35938129e+01,  2.75395312e+01,  2.73896286e+01,
       -2.09084576e+01, -8.21039247e+00,  6.11694430e+00,  9.45705399e-02,
        5.91076641e-02, -9.73749035e-02, -7.73561081e-02,  5.36481066e-02,
        1.83226762e-02, -1.44945359e-02,  4.58792568e-04,  1.10834649e-03,
       -2.41368796e-04,  1.53578691e-05, -3.17297219e-02,  1.44696334e-02,
        7.23980680e-02,  8.10793229e-03, -3.80260898e-02, -1.23657449e-02,
        5.10530146e-03,  2.40167802e-03, -1.28585157e-04, -1.58090377e-04,
       -1.71634898e-05])

w1 = np.array([ 7.46307791e-01, -3.62656279e-01, -1.62747304e-01,  4.22051969e-02,
        3.15709792e-02,  4.71010348e-02,  1.62346134e-01,  4.15258216e-02,
        1.29424565e-01,  7.97953895e-02, -8.57183898e-01, -3.91168283e-01,
        3.69160957e-01, -1.47883992e-02, -4.52038595e-02,  1.58366284e-02,
       -2.57220877e-03,  2.36352883e-04, -1.26043370e-05,  3.64159961e-07,
       -4.41169178e-09, -1.29724622e-01,  7.65708695e-02,  4.54632195e-02,
       -1.10254264e-02, -9.92897426e-03,  5.20663240e-03, -1.09743872e-03,
        1.25809770e-04, -8.22759300e-06,  2.88978730e-07, -4.23716276e-09,
        1.37829039e-02,  1.24617632e-02, -1.05446196e-03, -7.27510051e-03,
        3.81295196e-02, -8.50756356e-03, -2.36005862e-02,  7.18268242e-03,
        6.42849020e-03, -9.35887384e-04, -5.93751640e-04, -1.05033969e-01,
       -9.21660631e-02,  5.85246596e-02, -1.74234314e-02,  3.68355958e-02,
       -2.88398567e-02,  1.29504085e-02, -4.93421975e-03,  1.46475488e-03,
       -2.37490434e-04,  1.36697820e-05, -2.36863443e-02,  1.07151552e-02,
        1.94674247e-02, -1.39446316e-02, -1.86814108e-03,  3.14117672e-03,
       -4.54401101e-04, -1.81591781e-04,  6.73826813e-05, -8.08910064e-06,
        3.41386998e-07,  1.89549515e-01,  8.08772005e-02, -3.62887075e-03,
        3.69240587e-02, -4.82295422e-02,  9.92200070e-03, -3.08347756e-02,
       -2.45992087e-03,  9.36762275e-03, -2.96569938e-02,  1.80967872e-02,
       -9.93726214e-03,  3.17135342e-02, -5.17777798e-03, -3.08686113e-02,
        1.80954358e-02,  1.69667591e-03, -4.82503641e-03,  1.89669519e-03,
       -3.50361327e-04,  3.21936239e-05, -1.18733091e-06, -8.74023573e-02,
       -2.68667976e-02,  6.44490157e-02, -5.89647690e-03, -2.74072631e-02,
        3.19285548e-03,  4.80381604e-03, -4.04531561e-04, -3.82777427e-04,
        1.53771308e-05,  1.13557627e-05, -4.86246422e-02,  3.64139949e-02,
       -6.07393081e-03,  2.70207271e-03, -5.47727927e-03,  2.54909085e-03,
       -5.18447494e-04,  5.14119651e-05, -2.09261592e-06, -1.28721746e-08,
        2.38869920e-09])

w23 = np.array([ 8.34948407e-01, -2.74999577e-01, -4.21263485e-02,  2.94055488e-01,
        1.78932586e-01,  4.16418163e-02,  1.76705457e-01,  4.81478686e-02,
        8.74719825e-02,  1.81250411e-01,  8.32765797e-02, -1.03898071e-01,
        1.51916483e-01,  2.25646717e-02, -9.73364847e-01, -2.46009403e-01,
        3.15100768e-01, -5.15344041e-02, -1.16471392e-02,  5.12850716e-03,
       -7.53276615e-04,  5.59081273e-05, -2.11081897e-06,  3.22676198e-08,
       -1.66321286e-01,  1.15085737e-01,  2.10604682e-02, -2.84833061e-02,
        8.58967445e-03, -1.32053085e-03,  1.17564552e-04, -6.13520809e-06,
        1.74556795e-07, -2.09324500e-09, -4.29083433e-02, -2.55689602e-02,
       -1.38278906e-02,  1.00957517e-01,  8.28880348e-02, -7.28480308e-02,
       -2.87575296e-02,  1.98769963e-02,  2.69857195e-03, -1.74207231e-03,
        3.41547163e-01, -4.37826252e-01, -3.47241836e-01,  4.02398373e-01,
        1.38338499e-01, -2.13292159e-01,  1.27609400e-02,  4.26264170e-02,
       -1.50786303e-02,  1.53385930e-03,  6.17118052e-02, -2.01471332e-01,
        1.58183638e-01, -6.05340713e-02,  1.23153793e-02, -1.26040953e-03,
        3.60859898e-05,  4.56567829e-06, -4.33265295e-07,  1.11219523e-08,
        7.94469881e-03, -1.93224600e-02,  1.93057086e-02, -1.37331958e-03,
       -3.76045479e-03,  7.35598538e-04,  2.30324460e-04, -5.32015073e-05,
       -4.19494777e-06,  1.03023167e-06,  1.01735403e-01, -4.40238228e-01,
        6.07790251e-02,  1.52663889e-01,  1.20156820e-01, -2.73420186e-01,
        1.66842676e-01, -4.91759133e-02,  7.24762502e-03, -4.29321854e-04,
       -2.81722210e-02, -7.10515296e-03,  1.66838615e-02, -1.72120522e-03,
       -3.40876338e-03,  8.61380837e-04,  1.90615318e-04, -9.76660959e-05,
        1.30091625e-05, -5.80643693e-07,  4.14916094e-01, -3.66585016e-02,
       -5.00808015e-01,  9.07119723e-02,  1.39110950e-01, -9.88610018e-03,
        1.72940732e-01,  7.60222558e-03, -9.62034318e-02, -1.18918379e-02,
       -1.26766754e-01,  4.69975322e-02,  4.43291702e-01, -2.16020385e-01,
       -8.77833965e-02, -2.84728815e-02, -3.88694693e-01,  2.97896440e-01,
        2.09090299e-01, -1.46500154e-01,  6.65788235e-02,  2.11754006e-02,
       -6.42359951e-02,  1.96810677e-02,  1.53056776e-02, -1.44594577e-02,
        5.08748421e-03, -9.16486687e-04,  8.36601696e-05, -3.06284467e-06,
       -8.63972644e-02, -2.88215342e-02,  5.68069164e-02,  1.50871836e-02,
       -2.46295352e-02,  1.39149704e-03,  3.20968176e-03, -5.21711600e-04,
       -1.27078658e-04,  2.63285618e-05, -5.15186937e-02, -8.75755574e-03,
       -3.14186443e-02,  3.69997616e-02, -1.58439185e-02,  3.55192689e-03,
       -4.57311436e-04,  3.39509033e-05, -1.34705338e-06,  2.20174575e-08])

pri_0_y = predict_labels(w0, build_poly(X_pri_0, 12))
pri_1_y = predict_labels(w1, build_poly(X_pri_1, 12))
pri_23_y = predict_labels(w23, build_poly(X_pri_23, 11))

predictions[ids_pri_0] = pri_0_y
predictions[ids_pri_1] = pri_1_y
predictions[ids_pri_23] = pri_23_y

create_csv_submission(ids, predictions, 'output.csv')

